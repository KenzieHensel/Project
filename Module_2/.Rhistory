install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
library("Rcpp")
library("Rcpp")
ecalCpp("1+1")
library("Rcpp")
evalCpp("1+1")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("arules")
install.packages("TSP")
install.packages("data.table")
install.packages("arulesViz", dependencies = TRUE)
install.packages("sp")
install.packages("datasets.load")
install.packages("ggplot2")
install.packages("dplyr", dependencies = TRUE)
install.packages("purrr", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("tidyr")
library(viridis)
library(arules)
library(TSP)
library(data.table)
library(ggplot2)
library(Matrix)
library(tcltk)
library(dplyr)
#library(devtools)
library(purrr)
library(tidyr)
ARM_df <- read.transactions("C:\Users\kenzi\OneDrive - UCB-O365\MSDS\MACHINE LEARNING\Project\Module_2\game_details_copy.csv", rm.duplicates = FALSE, format = "basket", sep=",")
ARM_df <- read.transactions("C:/Users/kenzi/OneDrive - UCB-O365/MSDS/MACHINE LEARNING/Project/Module_2/game_details_copy.csv", rm.duplicates = FALSE, format = "basket", sep=",")
inspect(ARM_df[1:5])
apriori_ARM <- arules::apriori(ARM_df, parameter = list(support = .05, confidence = .05, minlen=2))
inspect(apriori_ARM)
ARM_df <- read.transactions("C:/Users/kenzi/OneDrive - UCB-O365/MSDS/MACHINE LEARNING/Project/Module_2/categories.csv", rm.duplicates = FALSE, format = "basket", sep=",")
inspect(ARM_df[1:5])
ARM_df <- read.transactions("C:/Users/kenzi/OneDrive - UCB-O365/MSDS/MACHINE LEARNING/Project/Module_2/categories.csv", rm.duplicates = FALSE, format = "basket", sep=",")
inspect(ARM_df[1:5])
apriori_ARM <- arules::apriori(ARM_df, parameter = list(support = .05, confidence = .05, minlen=2))
inspect(apriori_ARM)
apriori_ARM <- arules::apriori(ARM_df, parameter = list(support = .01, confidence = .01, minlen=2))
inspect(apriori_ARM)
ARM_df <- read.transactions("C:/Users/kenzi/OneDrive - UCB-O365/MSDS/MACHINE LEARNING/Project/Module_2/categories.csv", rm.duplicates = FALSE, format = "basket", sep=",")
install.packages("arules")
install.packages("TSP")
install.packages("data.table")
install.packages("arulesViz", dependencies = TRUE)
install.packages("sp")
install.packages("datasets.load")
install.packages("ggplot2")
install.packages("dplyr", dependencies = TRUE)
install.packages("datasets.load")
install.packages("arulesViz", dependencies = TRUE)
install.packages("purrr", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("arulesViz", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("tidyr")
library(viridis)
library(arules)
library(TSP)
library(data.table)
library(ggplot2)
library(Matrix)
library(tcltk)
library(dplyr)
#library(devtools)
library(purrr)
library(tidyr)
ARM_df <- read.transactions("C:/Users/kenzi/OneDrive - UCB-O365/MSDS/MACHINE LEARNING/Project/Module_2/categories.csv", rm.duplicates = FALSE, format = "basket", sep=",")
ARM_df <- read.transactions("C:\Users\kenzi\OneDrive - UCB-O365\MSDS\MACHINE LEARNING\Project\Module_2\game_details_copy.csv", rm.duplicates = FALSE, format = "basket", sep=",")
ARM_df <- read.transactions("C:/Users/kenzi/OneDrive - UCB-O365/MSDS/MACHINE LEARNING/Project/Module_2/game_details_copy.csv", rm.duplicates = FALSE, format = "basket", sep=",")
inspect(ARM_df[1:5])
#Cleaning up the categories column by removing {, }, [, ], '
game_data$categories <- gsub("[\\{\\}\\[\\]]", "", game_data$categories)
#Loading my dataset
game_data <- read.csv("C:/Users/kenzi/OneDrive - UCB-O365/MSDS/MACHINE LEARNING/Project/Module_2/game_details_copy.csv", stringsAsFactors = FALSE)
#Cleaning up the categories column by removing {, }, [, ], '
game_data$categories <- gsub("[\\{\\}\\[\\]]", "", game_data$categories)
game_data$categories <- gsub("'", "", game_data$categories)
game_data$categories <- gsub("\\[|\\]", "", game_data$categories)
#Viewing the first few rows of the cleaned dataset
head(game_data$categories)
#Separateing the categories column into basket data
#Splitting the categories by comma and creating a list of transactions
basket_data <- strsplit(game_data$categories, ", ")
#Creating a transaction object
basket_transactions <- as(basket_data, "transactions")
#Separateing the categories column into basket data
#Splitting the categories by comma and creating a list of transactions
basket_data <- strsplit(game_data$categories, ", ")
#Creating a transaction object
basket_transactions <- as(basket_data, "transactions")
#Inspecting the basket data
inspect(head(basket_transactions, 5))
#Generating association rules with a minimum support and confidence
rules <- apriori(basket_transactions,
parameter = list(supp = 0.01, conf = 0.6))
#Inspecting the generated rules
inspect(rules)
#Generating association rules with a minimum support and confidence
rules <- arules::apriori(basket_transactions,
parameter = list(supp = 0.01, conf = 0.6))
#Inspecting the generated rules
inspect(rules)
sorted_rules_conf <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(head(sorted_rules_conf, 15))
#Sorting rules by lift and inspecting the top 15 rules
sorted_rules_lift <- sort(rules, by = "lift", decreasing = TRUE)
inspect(head(sorted_rules_lift, 15))
sorted_rules_supp <- sort(rules, by = "support", decreasing = TRUE)
inspect(head(sorted_rules_supp, 15))
#Generating association rules with a minimum support and higher confidence
rules_high_conf <- arules::apriori(basket_transactions,
parameter = list(supp = 0.01, conf = 0.8))
#Inspecting the generated rules
inspect(rules_high_conf)
#Sortting rules by lift and inspect the top 15 rules
sorted_rules_high_conf <- sort(rules_high_conf, by = "lift", decreasing = TRUE)
inspect(head(sorted_rules_high_conf, 15))
#Generating association rules with a higher support and minimum confidence
rules_high_supp <- apriori(basket_transactions,
parameter = list(supp = 0.05, conf = 0.6))
#Inspecting the generated rules
inspect(rules_high_supp)
# Filter rules containing 'Fantasy'
fantasy_rules <- subset(rules, rhs %pin% "Fantasy")
inspect(fantasy_rules)
# Filter rules containing 'Adventure'
adventure_rules <- subset(rules, rhs %pin% "Adventure")
inspect(adventure_rules)
# Filter rules containing 'Fighting'
adventure_rules <- subset(rules, rhs %pin% "Fighting")
inspect(adventure_rules)
library(devtools)
install_github('mahahsler/arulesViz')
library(devtools)
install_github("mhahsler/arulesViz")
Fantasy_Vis <- head(sort(fantasy_rules, by='lift')15)
# Filter rules containing 'Adventure'
adventure_rules <- subset(rules, rhs %pin% "Adventure")
inspect(adventure_rules)
# Filter rules containing 'Fantasy'
fantasy_rules <- subset(rules, rhs %pin% "Fantasy")
inspect(fantasy_rules)
Fantasy_Vis <- head(sort(fantasy_rules, by='lift'),15)
plot(Fantasy_Vis)
library(devtools)
install_github("mhahsler/arulesViz")
'force = TRUE'
Fantasy_Vis <- head(sort(fantasy_rules, by='lift'),15)
plot(Fantasy_Vis)
install.packages(arulesVis)
install.packages('arulesVis')
Fantasy_Vis <- head(sort(fantasy_rules, by='lift'),15)
plot(Fantasy_Vis)
Fantasy_Vis <- head(sort(fantasy_rules, by='lift'),15)
plot(Fantasy_Vis)
Fantasy_Vis <- head(sort(fantasy_rules, by='lift'),15)
plot(Fantasy_Vis)
library(devtools)
install_github("mhahsler/arulesViz")
install.packages('arulesVis')
